
NVIC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000020c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003ac  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  000013ac  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  000013ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003ac  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a8  080003a8  000013a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003ac  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003ac  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007af  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000021c  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00001da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007b  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000bf4  00000000  00000000  00001edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000365  00000000  00000000  00002acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000037bd  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000065f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000200  00000000  00000000  00006634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000da  00000000  00000000  00006834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800038c 	.word	0x0800038c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800038c 	.word	0x0800038c

080001d8 <NVIC_EnableIRQ>:
 * @param  IRQn: The IRQ number of the interrupt to enable.
 *               This parameter can be an enumerator from IRQn_Type.
 * @retval None
 *  note    IRQn must not be negative
 */
void NVIC_EnableIRQ(IRQn_Type IRQn){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]

	if (((uint8_t)IRQn)>=0){

		NVIC->NVIC_ISER[(uint8_t)IRQn/32]|=(1UL<<((uint8_t)IRQn%32)) ;
 80001e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000210 <NVIC_EnableIRQ+0x38>)
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	b2d8      	uxtb	r0, r3
 80001ea:	4603      	mov	r3, r0
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f303 	lsl.w	r3, r1, r3
 80001fc:	4904      	ldr	r1, [pc, #16]	@ (8000210 <NVIC_EnableIRQ+0x38>)
 80001fe:	4313      	orrs	r3, r2
 8000200:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

	}



}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	e000e100 	.word	0xe000e100

08000214 <NVIC_SetPendingIRQ>:
 * @param  IRQn: The IRQ number of the interrupt to set pending.
 *               This parameter can be an enumerator from IRQn_Type.
 * @retval None
 *  note    IRQn must not be negative
 */
void NVIC_SetPendingIRQ(IRQn_Type IRQn){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	if (((uint8_t)IRQn)>=0){

		NVIC->NVIC_ISPR[(uint8_t)IRQn/32]|=(1UL<<((uint8_t)IRQn%32)) ;
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <NVIC_SetPendingIRQ+0x40>)
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	b2d8      	uxtb	r0, r3
 8000226:	4603      	mov	r3, r0
 8000228:	3340      	adds	r3, #64	@ 0x40
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 031f 	and.w	r3, r3, #31
 8000234:	2101      	movs	r1, #1
 8000236:	fa01 f303 	lsl.w	r3, r1, r3
 800023a:	4906      	ldr	r1, [pc, #24]	@ (8000254 <NVIC_SetPendingIRQ+0x40>)
 800023c:	431a      	orrs	r2, r3
 800023e:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//NVIC->NVIC_ISPR[((uint8_t)IRQn)>>5] = (1UL<<(((uint8_t)IRQn)& 0x1f)) ;

	}

}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000e100 	.word	0xe000e100

08000258 <NVIC_triggerSoftware_interrupt>:
 *
 * @param IRQn The IRQ number to trigger. This should be a value of type IRQn_Type,
 *
 */

void NVIC_triggerSoftware_interrupt(IRQn_Type IRQn){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]


	if (((uint8_t)IRQn)>=0){


		NVIC->STIR=(uint32_t)IRQn ;
 8000262:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <NVIC_triggerSoftware_interrupt+0x20>)
 8000264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000268:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00





}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100

0800027c <main>:
uint8_t volatile EXTI15_10_IRQHandler_flag = 0 ;

uint8_t volatile USART1_IRQHandler_active_flage1 = 0 ;
uint8_t volatile USART1_IRQHandler_active_flage2 = 0 ;
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

	  NVIC_EnableIRQ(USART2_IRQn) ;
 8000280:	2026      	movs	r0, #38	@ 0x26
 8000282:	f7ff ffa9 	bl	80001d8 <NVIC_EnableIRQ>
	  NVIC_triggerSoftware_interrupt(USART2_IRQn) ;
 8000286:	2026      	movs	r0, #38	@ 0x26
 8000288:	f7ff ffe6 	bl	8000258 <NVIC_triggerSoftware_interrupt>


	*/


	while(1){
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <main+0x10>

08000290 <USART1_IRQHandler>:
		//USART1_IRQHandler_active_flage1=NVIC_GetActive(USART1_IRQn) ;

	}
}

void USART1_IRQHandler (void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	USART1_IRQHandler_flag = 1 ;
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <USART1_IRQHandler+0x1c>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
	NVIC_SetPendingIRQ(USART2_IRQn) ;
 800029a:	2026      	movs	r0, #38	@ 0x26
 800029c:	f7ff ffba 	bl	8000214 <NVIC_SetPendingIRQ>

	USART1_IRQHandler_flag = 2 ;
 80002a0:	4b02      	ldr	r3, [pc, #8]	@ (80002ac <USART1_IRQHandler+0x1c>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	701a      	strb	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <USART2_IRQHandler>:
void USART2_IRQHandler (void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	USART2_IRQHandler_flag=1 ;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <USART2_IRQHandler+0x1c>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]

	NVIC_SetPendingIRQ(EXTI15_10_IRQn) ;
 80002ba:	2028      	movs	r0, #40	@ 0x28
 80002bc:	f7ff ffaa 	bl	8000214 <NVIC_SetPendingIRQ>
	USART2_IRQHandler_flag=2 ;
 80002c0:	4b02      	ldr	r3, [pc, #8]	@ (80002cc <USART2_IRQHandler+0x1c>)
 80002c2:	2202      	movs	r2, #2
 80002c4:	701a      	strb	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000001d 	.word	0x2000001d

080002d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

	EXTI15_10_IRQHandler_flag=1 ;
 80002d4:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <EXTI15_10_IRQHandler+0x1c>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]


	EXTI15_10_IRQHandler_flag=2 ;
 80002da:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <EXTI15_10_IRQHandler+0x1c>)
 80002dc:	2202      	movs	r2, #2
 80002de:	701a      	strb	r2, [r3, #0]

}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	2000001e 	.word	0x2000001e

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	@ (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	@ (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	@ (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f811 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ffab 	bl	800027c <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	20000020 	.word	0x20000020

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	4d0d      	ldr	r5, [pc, #52]	@ (800037c <__libc_init_array+0x38>)
 8000348:	4c0d      	ldr	r4, [pc, #52]	@ (8000380 <__libc_init_array+0x3c>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	2600      	movs	r6, #0
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	4d0b      	ldr	r5, [pc, #44]	@ (8000384 <__libc_init_array+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	@ (8000388 <__libc_init_array+0x44>)
 8000358:	f000 f818 	bl	800038c <_init>
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	2600      	movs	r6, #0
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
